image: docker:19.03.1

 # Pinning the right Docker version for the service also
#services:
 # - docker:19.03.1-dind

variables:
  DOCKER_DRIVER: overlay2
  DATABASE_URL: 'mongodb://mongo/user_posts'
  DOCKER_TLS_CERTDIR: ""

# image: docker:stable-dind


stages:
  - build
  - test
  - review
  - stage
  - production

#before_script:
#  - apt-get update && apt-get install -y ruby-full ruby-bundler build-essential
  #- docker login -u $HUB_LOGIN -p $HUB_PASSWORD
  #- docker info
  # - cd reddit
  # - bundle install

build_job:
  services:
    - docker:19.03.1-dind
  #image: docker:19.03.1-dind
  stage: build
  before_script:
    - echo 'Getting, building and publishing reddit'
    - docker info
    - docker login -u $HUB_LOGIN -p $HUB_PASSWORD
  script:
    #- docker info
    - ls -l
    - cd ./docker-monolith
   # - ls -l
    #- cd ./reddit
    - docker info
    - docker build -t reddit:latest .
    - docker images -a
   # - docker login -u $HUB_LOGIN -p $HUB_PASSWORD
    - docker tag reddit:latest $HUB_LOGIN/otus-reddit:2.$CI_PIPELINE_ID
    - docker push $HUB_LOGIN/otus-reddit:2.$CI_PIPELINE_ID
    - docker rmi reddit

test_unit_job:
  image: ruby:2.4.2
  stage: test
  services:
    - mongo:latest
  script:
    - cd reddit
    - bundle install
    - ruby simpletest.rb
    - echo 'Unit tests'

test_integration_job:
  stage: test
  script:
    - echo 'Integration tests'

deploy_dev_job:
  image: ubuntu:16.04
  stage: review
  variables:
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  before_script:
    # install docker
    - apt-get update && apt-get install -y sudo wget apt-transport-https ca-certificates curl gnupg gnupg-agent software-properties-common
    #- curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    #- sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    #- sudo apt-get update && sudo apt-get install -y docker-ce docker-ce-cli containerd.io
    #- sudo usermod -aG docker $USER
    #- sudo systemctl docker start
    #- sudo service docker restart
    #- docker info
    #- docker login -u $HUB_LOGIN -p $HUB_PASSWORD
    # install gcloud auth
    # try to install gce sdk by one string
    - echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - && sudo apt-get update -y && sudo apt-get install google-cloud-sdk -y
    # Add the Cloud SDK distribution URI as a package source
    #- echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
    # Import the Google Cloud Platform public key
    #- curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
    # Update the package list and install the Cloud SDK
    #- sudo apt-get update && sudo apt-get install google-cloud-sdk
    # create file with creds
    - echo $GCP_SERVICE_KEY | sudo tee serviceacc.json
    - gcloud auth activate-service-account --key-file=serviceacc.json

    - curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
    - wget https://releases.hashicorp.com/terraform/0.12.9/terraform_0.12.9_linux_amd64.zip -O /tmp/terraform.zip
    - sudo unzip -o -d /usr/local/bin/ /tmp/terraform.zip
    - python get-pip.py --user
    - pip install --user ansible
    - terraform --version
    - ansible --version
    - ls -l

  script:
    - echo 'Deploy'
    #- docker pull $HUB_LOGIN/otus-reddit:2.$CI_PIPELINE_ID
    #- docker inspect $HUB_LOGIN/otus-reddit:2.$CI_PIPELINE_ID
    #- docker ps
    #- if docker ps -a | grep reddit; then docker stop reddit && docker rm reddit; fi
    #- docker run --name reddit -d -p 9292:9292 $HUB_LOGIN/otus-reddit:2.$CI_PIPELINE_ID
  environment:
    name: dev
    url: http://dev.example.com

branch review:
  stage: review
  script: echo "Deploy to $CI_ENVIRONMENT_SLUG"
  environment:
    name: branch/$CI_COMMIT_REF_NAME
    url: http://$CI_ENVIRONMENT_SLUG.example.com
  only:
    - branches
  except:
    - master

staging:
  stage: stage
  when: manual
  only:
    - /^\d+\.\d+\.\d+/
  script:
    - echo 'Deploy'
  environment:
    name: stage
    url: http://beta.example.com

production:
  stage: production
  when: manual
  only:
    - /^\d+\.\d+\.\d+/
  script:
    - echo 'Deploy'
  environment:
    name: production
    url: http://example.com
